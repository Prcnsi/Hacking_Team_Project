모의해킹 2회차 Writeup
-김지선

	4조 공격
1.	취약점 분석
sqlmap으로 시나리오를 작성하며 배운 건데 웹에 $_GET으로 받는 페이지가 하나라도 있으면 
전체 DB와 테이블을 탈취할 수 있다.

그래서 $_GET으로 받는 페이지를 먼저 찾아봤다.
id라는 변수를 get으로 받는 것으로 추정되는 페이지 발견했다.


 
2.	GET으로 Injection 시도
위에서 발견한 페이지를 대상으로 아래와 같이 데이터베이스를 조회하는 명령을 입력했다.

Sqlmap -u https://colony-webnetwork-dieqj.run.goorm.io/register.php --dbs
	
그런데 에러가 나서 다시 페이지로 돌아가 소스코드를 살펴보았다. URL에 get의 형식을 띄고 있어서 당연히 get인 줄 알았는데 알고 보니 get이 아니라 그냥 하이퍼링크로 값을 고정한 거였다.

 




3.	POST로 Injection 시도
따라서 get으로 받는 url을 찾지 않고 바로 로그인 화면을 대상으로 sqlmap을 아래와 같이 post로 명령을 작성했다.

Sqlmap -u https://colony-webnetwork-dieqj.run.goorm.io/register.php 
--method=”post”—data=”username=1&password=3”
-p ”username” -v 3 -D colony –tables

--method로 post로 받는다고 알려주고 –data로 값이 어떻게 전달되는지 알려준다. 참고로 data에 지정된 id, pw의 1,3이라는 값은 아무거나 찍어 넣은 것이다. Username과 password 변수는 
소스코드의 name변수명이다.

 다음으로 –p로 변수가 무엇인지 알려준다. 처음 시도가 username이였고 안 되면 -p “password”도 해보려고 했는데 
다행히 잘 되었다.

 
 
위 사진과 같이 현재 로그인 화면의 DB는 colony임을 알아냈다.

4. 테이블,칼럼 조회
위 명령문에 옵션을 추가하는 형식으로
차례로 -tables,-columns를 추가해서 테이블과 칼럼을 조회했다.
 

5.	전체 DB 덤프는 실패
왜인지 모르겠지만 전체 DB는 덤프에 실패했다.

 
 
Sqlmap이 자동화 프로그램으로 Injection을 시도하고 있는 화면이다.
 

결론적으로 4조는 DB 명 colony와 테이블명 user만 알아낸 상태로 종료되었다.
	3조 공격
1.	취약점 분석
3조는 대놓고 form 태그에 method=”get”으로 명시되어 있어서 해당 페이지를 상대로 Injection을 시도했다.

2. 데이터베이스 조회
get으로 받는 페이지의 URL에 –dbs 옵션을 주어
데이터베이스 목록을 먼저 확인했다.
 
 
위 사진과 같이 여러 DB 목록을 확인할 수 있다.
Information/performance_schema, sys 등등은 보통 디폴트
데이터베이스여서 Testbook이 로그인 테이블이 있는 DB라고 
추정했지만 확인을 위해 현재 DB를 조회해 준다.



3. 현재 데이터베이스 확인
현재 데이터베이스는 예상과 같이 testbook 임을
확인할 수 있다.
 
 
4.	테이블 조회
확인한 db testbook을 -D “testbook”으로 지정해주고
		--tables로 테이블을 조회하면 blogin과 
board 테이블을 확인할 수 있다.
	
 

 


참고로 blogin 테이블은 실습 1차시에 sql injection을
시도했을 때 힌트로 나온 테이블명과 일치한다.
 

5. 전체 덤프
 Board 테이블은 게시판 DB이고 blogin은 로그인 DB라고 
추정할 수 있다. 이를 확인하기 위해 blogin과 board 테이블을 
데이터베이스를 지정해 준 상태에서 차례로 덤프 해준다.
 
 

 
위 사진을 보면 예상과 같이 blogin이 로그인 테이블이고 
board가 게시판 테이블임을 확인할 수 있다.
그리고 두 테이블 모두 덤프에 성공했다.

Blogin 테이블에서는 회원들의 정보가 탈취되었고 board 
테이블에서도 게시판에 작성된 글이 DB에 저장된 화면을 
확인할 수 있다. 이상으로 3조 Writeup도 마무리된다.

	대응방안
만약 이것이 실제 웹페이지였다면 위 정보는 회원들의 
실제 정보였을 것이다.

 대응 방안으로는 Mysqli_real_escape_string() 등을 이용하여 입력값에 대한 검증이 필요하다.
Mysqli_real_escape_string()은 php에서 제공하는 함수로 웹과 DB를 연동할 때 String을 escape 한 상태로 만들어준다.

그리고 비밀번호를 암호화해서 저장하는 것도 중요하다.
위에 덤프 된 blogin 테이블을 보면 암호화되지 않고 저장되어
그대로 패스워드가 노출되는 것을 확인할 수 있다.
따라서 md5 혹은 외부 파일을 include하는 방법 등으로
 암호화가 필요하다.
